(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (process,global){
///<reference path="../defs/device.d.ts" />
//Many checks are based on https://github.com/arasatasaygin/is.js/blob/master/is.js
var userAgent = 'navigator' in window && 'userAgent' in navigator && navigator.userAgent.toLowerCase() || '', vendor = 'navigator' in window && 'vendor' in navigator && navigator.vendor.toLowerCase() || '', appVersion = 'navigator' in window && 'appVersion' in navigator && navigator.appVersion.toLowerCase() || '';
//Browsers
var isChrome = /chrome|chromium/i.test(userAgent) && /google inc/.test(vendor), isFirefox = /firefox/i.test(userAgent), isIE = /msie/i.test(userAgent) || "ActiveXObject" in window, isOpera = /^Opera\//.test(userAgent) || /\x20OPR\//.test(userAgent), isSafari = /safari/i.test(userAgent) && /apple computer/i.test(vendor);
//Devices && OS
var isIphone = /iphone/i.test(userAgent), isIpad = /ipad/i.test(userAgent), isIpod = /ipod/i.test(userAgent), isAndroid = /android/i.test(userAgent), isAndroidPhone = /android/i.test(userAgent) && /mobile/i.test(userAgent), isAndroidTablet = /android/i.test(userAgent) && !/mobile/i.test(userAgent), isLinux = /linux/i.test(appVersion), isMac = /mac/i.test(appVersion), isWindow = /win/i.test(appVersion), isWindowPhone = isWindow && /phone/i.test(userAgent), isWindowTablet = isWindow && !isWindowPhone && /touch/i.test(userAgent), isMobile = isIphone || isIpod || isAndroidPhone || isWindowPhone, isTablet = isIpad || isAndroidTablet || isWindowTablet, isDesktop = !isMobile && !isTablet, isTouchDevice = 'ontouchstart' in window || 'DocumentTouch' in window && document instanceof DocumentTouch, isCocoon = !!navigator.isCocoonJS, isNodeWebkit = !!(typeof process === "object" && process.title === "node" && typeof global === "object"), isEjecta = !!window.ejecta, isCrosswalk = /Crosswalk/.test(userAgent), isCordova = !!window.cordova, isElectron = !!(process && process.versions && (process.versions.electron || process.versions['atom-shell']));
var hasVibrate = !!navigator.vibrate && (isMobile || isTablet), hasMouseWheel = 'onwheel' in window || 'onmousewheel' in window || 'MouseScrollEvent' in window, hasAccelerometer = 'DeviceMotionEvent' in window, hasGamepad = !!navigator.getGamepads || !!navigator.webkitGetGamepads;
//FullScreen
var div = document.createElement('div');
var fullScreenRequest = div.requestFullscreen || div.webkitRequestFullScreen || div.msRequestFullScreen || div.mozRequestFullScreen, fullScreenCancel = document.cancelFullScreen || document.exitFullScreen || document.webkitCancelFullScreen || document.msCancelFullScreen || document.mozCancelFullScreen, hasFullScreen = !!(fullScreenRequest && fullScreenCancel);
//Audio
var hasHTMLAudio = !!window.Audio, webAudioContext = window.AudioContext || window.webkitAudioContext, hasWebAudio = !!webAudioContext, hasAudio = hasWebAudio || hasHTMLAudio, hasMp3 = false, hasOgg = false, hasWav = false, hasM4a = false;
//Audio mimeTypes
if (hasAudio) {
    var audio = document.createElement('audio');
    hasMp3 = audio.canPlayType('audio/mpeg;') !== "";
    hasOgg = audio.canPlayType('audio/ogg; codecs="vorbis"') !== "";
    hasWav = audio.canPlayType('audio/wav') !== "";
    hasM4a = audio.canPlayType('audio/mp4; codecs="mp4a.40.5"') !== "";
}
var Device = {
    isChrome: isChrome,
    isFirefox: isFirefox,
    isIE: isIE,
    isOpera: isOpera,
    isSafari: isSafari,
    isIphone: isIphone,
    isIpad: isIpad,
    isIpod: isIpod,
    isAndroid: isAndroid,
    isAndroidPhone: isAndroidPhone,
    isAndroidTablet: isAndroidTablet,
    isLinux: isLinux,
    isMac: isMac,
    isWindow: isWindow,
    isWindowPhone: isWindowPhone,
    isWindowTablet: isWindowTablet,
    isMobile: isMobile,
    isTablet: isTablet,
    isDesktop: isDesktop,
    isTouchDevice: isTouchDevice,
    isCocoon: isCocoon,
    isNodeWebkit: isNodeWebkit,
    isEjecta: isEjecta,
    isCordova: isCordova,
    isCrosswalk: isCrosswalk,
    isElectron: isElectron,
    isAtomShell: isElectron,
    //isOnline : navigator.onLine,
    hasVibrate: hasVibrate,
    hasMouseWheel: hasMouseWheel,
    hasFullScreen: hasFullScreen,
    hasAccelerometer: hasAccelerometer,
    hasGamepad: hasGamepad,
    fullScreenRequest: fullScreenRequest ? fullScreenRequest.name : undefined,
    fullScreenCancel: fullScreenCancel ? fullScreenCancel.name : undefined,
    hasAudio: hasAudio,
    hasHTMLAudio: hasHTMLAudio,
    hasWebAudio: hasWebAudio,
    webAudioContext: webAudioContext,
    hasMp3: hasMp3,
    hasM4a: hasM4a,
    hasOgg: hasOgg,
    hasWav: hasWav,
    getMouseWheelEvent: function () {
        if (!hasMouseWheel)
            return;
        var evt;
        if ('onwheel' in window) {
            evt = 'wheel';
        }
        else if ('onmousewheel' in window) {
            evt = 'mousewheel';
        }
        else if ('MouseScrollEvent' in window) {
            evt = 'DOMMouseScroll';
        }
        return evt;
    },
    vibrate: function (value) {
        if (hasVibrate) {
            navigator.vibrate(value);
        }
    },
    get isOnline() {
        return window.navigator.onLine;
    }
};
module.exports = Device;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":1}],3:[function(require,module,exports){
///<reference path="../defs/pixi.js.d.ts" />
module.exports = function inject() {
    PIXI.DisplayObject.prototype.speed = 0;
    PIXI.DisplayObject.prototype.velocity = new PIXI.Point();
    PIXI.DisplayObject.prototype.direction = 0;
    PIXI.DisplayObject.prototype.rotationSpeed = 0;
    PIXI.DisplayObject.prototype.update = function (deltaTime) {
        this.position.x += this.velocity.x * deltaTime;
        this.position.y += this.velocity.y * deltaTime;
        this.rotation += this.rotationSpeed * deltaTime;
    };
    PIXI.DisplayObject.prototype.addTo = function (parent) {
        parent.addChild(this);
        return this;
    };
};

},{}],4:[function(require,module,exports){
///<reference path="../defs/pixi.js.d.ts" />
///<reference path="../defs/core.d.ts" />
var Device = require('./Device');
var last = 0;
var minFrameMS = 20;
var Game = (function () {
    function Game(width, height, config) {
        if (width === void 0) { width = 800; }
        if (height === void 0) { height = 600; }
        this.id = "PixiGame";
        this.stage = new PIXI.Container();
        this.delta = 0;
        this.time = 0;
        this.lastTime = 0;
        this.renderer = PIXI.autoDetectRenderer(width, height);
        this.canvas = this.renderer.view;
        document.body.appendChild(this.canvas);
        this.isWebGL = (this.renderer.type === PIXI.RENDERER_TYPE.WEBGL); //TODO: pull request en las definiciones, esto estÃ¡ mal
        this.isWebAudio = (Device.hasWebAudio); //TODO: check -> && config.useWebAudio
    }
    Game.prototype._animate = function () {
        this.raf = window.requestAnimationFrame(this._animate.bind(this));
        var now = Date.now();
        this.time += Math.min((now - last) / 1000, minFrameMS);
        this.delta = this.time - this.lastTime;
        this.lastTime = this.time;
        last = now;
        this.renderer.render(this.stage);
        this.update(this.delta);
    };
    Game.prototype.update = function (deltaTime) {
        for (var i = 0; i < this.stage.children.length; i++) {
            this.stage.children[i].update(this.delta);
        }
        return this;
    };
    Game.prototype.start = function () {
        this._animate();
        return this;
    };
    Game.prototype.stop = function () {
        window.cancelAnimationFrame(this.raf);
        return this;
    };
    return Game;
})();
module.exports = Game;

},{"./Device":2}],5:[function(require,module,exports){
///<reference path="./defs/pixi.js.d.ts" />
if (typeof PIXI === "undefined") {
    throw new Error('Not found pixi.js...');
}
var injections = require('./injections');
injections();
var Game = require('./core/Game');
var Device = require('./core/Device');
var TurboPixi = {
    Device: Device,
    Game: Game
};
//Add new classes in pixi.js
for (var c in TurboPixi) {
    PIXI[c] = TurboPixi[c];
}

},{"./core/Device":2,"./core/Game":4,"./injections":6}],6:[function(require,module,exports){
var DisplayObject = require('./core/DisplayObject');
module.exports = function inject() {
    DisplayObject();
};

},{"./core/DisplayObject":3}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
